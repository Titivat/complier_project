
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADD DIV EQU EQUEQU FLOAT GREATER GREATEREQU INT INTDIV LESS LESSEUQ LPAREN MUL NOTEQU POW RPAREN SCI SUB VAR\n    calc : expression\n         | var_assign\n         | empty\n    \n    var_assign : VAR EQU expression\n    \n    expression : expression POW expression\n               | expression MUL expression\n               | expression DIV expression\n               | expression SUB expression\n               | expression ADD expression\n               | expression GREATER expression\n               | expression GREATEREQU expression\n               | expression LESS expression\n               | expression LESSEUQ expression\n               | expression EQUEQU expression\n               | expression NOTEQU expression\n    \n    expression : INT\n               | FLOAT\n               | SCI\n               | parentheses\n    \n    parentheses : LPAREN expression RPAREN\n    \n    expression : VAR\n    \n    empty :\n    '
    
_lr_action_items = {'INT':([0,10,11,12,13,14,15,16,17,18,19,20,21,22,],[5,5,5,5,5,5,5,5,5,5,5,5,5,5,]),'FLOAT':([0,10,11,12,13,14,15,16,17,18,19,20,21,22,],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,]),'SCI':([0,10,11,12,13,14,15,16,17,18,19,20,21,22,],[7,7,7,7,7,7,7,7,7,7,7,7,7,7,]),'VAR':([0,10,11,12,13,14,15,16,17,18,19,20,21,22,],[9,24,24,24,24,24,24,24,24,24,24,24,24,24,]),'$end':([0,1,2,3,4,5,6,7,8,9,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[-22,0,-1,-2,-3,-16,-17,-18,-19,-21,-21,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-4,-20,]),'LPAREN':([0,10,11,12,13,14,15,16,17,18,19,20,21,22,],[10,10,10,10,10,10,10,10,10,10,10,10,10,10,]),'POW':([2,5,6,7,8,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[11,-16,-17,-18,-19,-21,11,-21,11,11,11,11,11,11,11,11,11,11,11,11,-20,]),'MUL':([2,5,6,7,8,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[12,-16,-17,-18,-19,-21,12,-21,12,12,12,12,12,12,12,12,12,12,12,12,-20,]),'DIV':([2,5,6,7,8,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[13,-16,-17,-18,-19,-21,13,-21,13,13,13,13,13,13,13,13,13,13,13,13,-20,]),'SUB':([2,5,6,7,8,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[14,-16,-17,-18,-19,-21,14,-21,14,14,14,14,14,14,14,14,14,14,14,14,-20,]),'ADD':([2,5,6,7,8,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[15,-16,-17,-18,-19,-21,15,-21,15,15,15,15,15,15,15,15,15,15,15,15,-20,]),'GREATER':([2,5,6,7,8,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[16,-16,-17,-18,-19,-21,16,-21,16,16,16,16,16,16,16,16,16,16,16,16,-20,]),'GREATEREQU':([2,5,6,7,8,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[17,-16,-17,-18,-19,-21,17,-21,17,17,17,17,17,17,17,17,17,17,17,17,-20,]),'LESS':([2,5,6,7,8,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[18,-16,-17,-18,-19,-21,18,-21,18,18,18,18,18,18,18,18,18,18,18,18,-20,]),'LESSEUQ':([2,5,6,7,8,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[19,-16,-17,-18,-19,-21,19,-21,19,19,19,19,19,19,19,19,19,19,19,19,-20,]),'EQUEQU':([2,5,6,7,8,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[20,-16,-17,-18,-19,-21,20,-21,20,20,20,20,20,20,20,20,20,20,20,20,-20,]),'NOTEQU':([2,5,6,7,8,9,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[21,-16,-17,-18,-19,-21,21,-21,21,21,21,21,21,21,21,21,21,21,21,21,-20,]),'RPAREN':([5,6,7,8,23,24,25,26,27,28,29,30,31,32,33,34,35,37,],[-16,-17,-18,-19,37,-21,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-20,]),'EQU':([9,],[22,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'calc':([0,],[1,]),'expression':([0,10,11,12,13,14,15,16,17,18,19,20,21,22,],[2,23,25,26,27,28,29,30,31,32,33,34,35,36,]),'var_assign':([0,],[3,]),'empty':([0,],[4,]),'parentheses':([0,10,11,12,13,14,15,16,17,18,19,20,21,22,],[8,8,8,8,8,8,8,8,8,8,8,8,8,8,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> calc","S'",1,None,None,None),
  ('calc -> expression','calc',1,'p_calc',' syntacticanalyzer.py',9),
  ('calc -> var_assign','calc',1,'p_calc',' syntacticanalyzer.py',10),
  ('calc -> empty','calc',1,'p_calc',' syntacticanalyzer.py',11),
  ('var_assign -> VAR EQU expression','var_assign',3,'p_var_assign',' syntacticanalyzer.py',17),
  ('expression -> expression POW expression','expression',3,'p_expression',' syntacticanalyzer.py',23),
  ('expression -> expression MUL expression','expression',3,'p_expression',' syntacticanalyzer.py',24),
  ('expression -> expression DIV expression','expression',3,'p_expression',' syntacticanalyzer.py',25),
  ('expression -> expression SUB expression','expression',3,'p_expression',' syntacticanalyzer.py',26),
  ('expression -> expression ADD expression','expression',3,'p_expression',' syntacticanalyzer.py',27),
  ('expression -> expression GREATER expression','expression',3,'p_expression',' syntacticanalyzer.py',28),
  ('expression -> expression GREATEREQU expression','expression',3,'p_expression',' syntacticanalyzer.py',29),
  ('expression -> expression LESS expression','expression',3,'p_expression',' syntacticanalyzer.py',30),
  ('expression -> expression LESSEUQ expression','expression',3,'p_expression',' syntacticanalyzer.py',31),
  ('expression -> expression EQUEQU expression','expression',3,'p_expression',' syntacticanalyzer.py',32),
  ('expression -> expression NOTEQU expression','expression',3,'p_expression',' syntacticanalyzer.py',33),
  ('expression -> INT','expression',1,'p_expression_int_float_sci',' syntacticanalyzer.py',39),
  ('expression -> FLOAT','expression',1,'p_expression_int_float_sci',' syntacticanalyzer.py',40),
  ('expression -> SCI','expression',1,'p_expression_int_float_sci',' syntacticanalyzer.py',41),
  ('expression -> parentheses','expression',1,'p_expression_int_float_sci',' syntacticanalyzer.py',42),
  ('parentheses -> LPAREN expression RPAREN','parentheses',3,'p_parentheses',' syntacticanalyzer.py',48),
  ('expression -> VAR','expression',1,'p_expression_var',' syntacticanalyzer.py',54),
  ('empty -> <empty>','empty',0,'p_empty',' syntacticanalyzer.py',64),
]
